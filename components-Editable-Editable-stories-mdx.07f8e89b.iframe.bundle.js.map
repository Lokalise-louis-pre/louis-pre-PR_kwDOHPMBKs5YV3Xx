{"version":3,"file":"components-Editable-Editable-stories-mdx.07f8e89b.iframe.bundle.js","mappings":";AAqOA;;AAGA;AArKA;;AAGA;;;;;;;;;ACtDA;;;;;;;;;AAUA;;;;;;;;;AAUA;;;;;;;;;AAgBA","sources":["webpack://@lokalise/louis/./src/components/Editable/Editable.stories.mdx","webpack://@lokalise/louis/./src/components/Popover/styles.ts"],"sourcesContent":["\nimport React from 'react';\n\nimport { useMDXComponents as _provideComponents } from \"@storybook/addon-docs/mdx-react-shim\";\nimport { Meta, Story, Canvas, ArgsTable } from '@storybook/addon-docs';\nimport { useArgs } from '@storybook/client-api';\nimport { styled } from '@lokalise/styled';\nimport { typography } from '../../utils/theme';\nimport { Editable } from './Editable';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const Template = args => {\n  const {\n    onChange,\n    ...rest\n  } = args;\n  const [_, updateArgs] = useArgs();\n\n  const handleChange = newValue => {\n    updateArgs({\n      value: newValue\n    });\n  };\n\n  return /*#__PURE__*/_jsx(Editable, {\n    onChange: handleChange,\n    ...rest\n  });\n};\n\nfunction MDXContent(props = {}) {\n  const {\n    wrapper: MDXLayout\n  } = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? /*#__PURE__*/_jsx(MDXLayout, { ...props,\n    children: /*#__PURE__*/_jsx(_createMdxContent, {})\n  }) : _createMdxContent();\n\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      ul: \"ul\",\n      li: \"li\",\n      a: \"a\",\n      p: \"p\",\n      h3: \"h3\",\n      pre: \"pre\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Meta, {\n        title: \"Components/Editable\",\n        component: Editable,\n        parameters: {\n          controls: {\n            sort: 'requiredFirst'\n          },\n          docs: {\n            source: {\n              excludeDecorators: true\n            }\n          }\n        },\n        decorators: [Story => {\n          const StoryContent = styled.div`\n\t \t\t\t${typography('body.base.default')};\n\t \t\t\tpadding: 115px 0 0 80px;\n\t \t\t`;\n          return /*#__PURE__*/_jsx(StoryContent, {\n            children: Story()\n          });\n        }]\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h1, {\n        id: \"editable\",\n        children: \"Editable\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n        children: [\"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: /*#__PURE__*/_jsx(_components.a, {\n            href: \"#overview\",\n            children: \"Overview\"\n          })\n        }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: /*#__PURE__*/_jsx(_components.a, {\n            href: \"#figma-design-file\",\n            children: \"Figma Design File\"\n          })\n        }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: /*#__PURE__*/_jsx(_components.a, {\n            href: \"#props\",\n            children: \"Props\"\n          })\n        }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: /*#__PURE__*/_jsx(_components.a, {\n            href: \"#examples\",\n            children: \"Examples\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", /*#__PURE__*/_jsx(\"h2\", {\n        id: \"overview\",\n        children: \"Overview\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n        children: \"Editable is used for editing inline text by clicking on the text.\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"installation\",\n        children: \"Installation\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n        children: /*#__PURE__*/_jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"npm install @lokalise/louis\\n\"\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"usage\",\n        children: \"Usage\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.pre, {\n        children: /*#__PURE__*/_jsx(_components.code, {\n          className: \"language-tsx\",\n          children: \"import { useState } from 'react';\\nimport { Editable } from '@lokalise/louis';\\n\\nexport default () => {\\n\\tconst [value, setValue] = useState();\\n\\treturn <Editable value={value} onChange={setValue} />;\\n};\\n\"\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(\"h2\", {\n        id: \"figma-design-file\",\n        children: \"Figma Design File\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n        children: [\"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: \"Figma Source File | Editable (not yet available in Figma, will be updated)\"\n        }), \"\\n\"]\n      }), \"\\n\", /*#__PURE__*/_jsx(\"h2\", {\n        id: \"props\",\n        children: \"Props\"\n      }), \"\\n\", /*#__PURE__*/_jsx(ArgsTable, {\n        of: Editable,\n        sort: \"requiredFirst\"\n      }), \"\\n\", /*#__PURE__*/_jsx(\"h2\", {\n        id: \"examples\",\n        children: \"Examples\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"default\",\n        children: \"Default\"\n      }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n        withSource: \"open\",\n        children: /*#__PURE__*/_jsx(Story, {\n          name: \"Default\",\n          args: {\n            value: 'Editable text'\n          },\n          children: Template.bind({})\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"empty-text\",\n        children: \"Empty Text\"\n      }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n        withSource: \"open\",\n        children: /*#__PURE__*/_jsx(Story, {\n          name: \"Empty Text\",\n          args: {\n            value: '',\n            emptyText: 'This Editable has an empty string as the value',\n            placeholder: 'Enter text'\n          },\n          children: Template.bind({})\n        })\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h3, {\n        id: \"disabled\",\n        children: \"Disabled\"\n      }), \"\\n\", /*#__PURE__*/_jsx(Canvas, {\n        withSource: \"open\",\n        children: /*#__PURE__*/_jsx(Story, {\n          name: \"Disabled\",\n          args: {\n            value: 'Disabled editable text',\n            disabled: true\n          },\n          children: Template.bind({})\n        })\n      })]\n    });\n  }\n}\n/* ========= */\n\n\nexport const defaultStory = Template.bind({});\ndefaultStory.storyName = 'Default';\ndefaultStory.args = {\n  value: \"Editable text\"\n};\ndefaultStory.parameters = {\n  storySource: {\n    source: 'args => {\\n  const {\\n    onChange,\\n    ...rest\\n  } = args;\\n  const [_, updateArgs] = useArgs();\\n\\n  const handleChange = newValue => {\\n    updateArgs({\\n      value: newValue\\n    });\\n  };\\n\\n  return <Editable onChange={handleChange} {...rest} />;\\n}'\n  }\n};\nexport const emptyText = Template.bind({});\nemptyText.storyName = 'Empty Text';\nemptyText.args = {\n  value: \"\",\n  emptyText: \"This Editable has an empty string as the value\",\n  placeholder: \"Enter text\"\n};\nemptyText.parameters = {\n  storySource: {\n    source: 'args => {\\n  const {\\n    onChange,\\n    ...rest\\n  } = args;\\n  const [_, updateArgs] = useArgs();\\n\\n  const handleChange = newValue => {\\n    updateArgs({\\n      value: newValue\\n    });\\n  };\\n\\n  return <Editable onChange={handleChange} {...rest} />;\\n}'\n  }\n};\nexport const disabled = Template.bind({});\ndisabled.storyName = 'Disabled';\ndisabled.args = {\n  value: \"Disabled editable text\",\n  disabled: true\n};\ndisabled.parameters = {\n  storySource: {\n    source: 'args => {\\n  const {\\n    onChange,\\n    ...rest\\n  } = args;\\n  const [_, updateArgs] = useArgs();\\n\\n  const handleChange = newValue => {\\n    updateArgs({\\n      value: newValue\\n    });\\n  };\\n\\n  return <Editable onChange={handleChange} {...rest} />;\\n}'\n  }\n};\nconst componentMeta = {\n  title: 'Components/Editable',\n  parameters: {\n    controls: {\n      sort: \"requiredFirst\"\n    },\n    docs: {\n      source: {\n        excludeDecorators: true\n      }\n    }\n  },\n  decorators: [Story => {\n    const StoryContent = styled.div`\n\t \t\t\t${typography(\"body.base.default\")};\n\t \t\t\tpadding: 115px 0 0 80px;\n\t \t\t`;\n    return /*#__PURE__*/_jsx(StoryContent, {\n      children: Story()\n    });\n  }],\n  component: Editable,\n  tags: ['stories-mdx'],\n  includeStories: [\"defaultStory\", \"emptyText\", \"disabled\"]\n};\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = { ...(componentMeta.parameters.docs || {}),\n  page: MDXContent\n};\nexport default componentMeta;","import type { Placement } from '@floating-ui/react';\nimport { css, excludeProps, styled, variants } from '@lokalise/styled';\nimport type { HTMLAttributes, RefAttributes } from 'react';\n\nimport { typography, value } from '../../utils/theme';\n\nconst bottom = css`\n\ttop: -5px;\n\n\t&::before {\n\t\tborder-left-width: 1px;\n\t\tborder-left-style: solid;\n\t\tborder-top-width: 1px;\n\t\tborder-top-style: solid;\n\t}\n`;\nconst top = css`\n\tbottom: -5px;\n\n\t&::before {\n\t\tborder-right-width: 1px;\n\t\tborder-right-style: solid;\n\t\tborder-bottom-width: 1px;\n\t\tborder-bottom-style: solid;\n\t}\n`;\nconst left = css`\n\tright: -5px;\n\n\t&::before {\n\t\tborder-right-width: 1px;\n\t\tborder-right-style: solid;\n\t\tborder-top-width: 1px;\n\t\tborder-top-style: solid;\n\t}\n`;\nconst right = css`\n\tleft: -5px;\n\n\t&::before {\n\t\tborder-left-width: 1px;\n\t\tborder-left-style: solid;\n\t\tborder-bottom-width: 1px;\n\t\tborder-bottom-style: solid;\n\t}\n`;\n\nexport type ArrowProps = {\n\tplacement?: Placement;\n} & HTMLAttributes<HTMLElement> &\n\tRefAttributes<HTMLElement>;\n\nexport const Arrow = styled.div.withConfig({ shouldForwardProp: excludeProps(['placement']) })<ArrowProps>`\n\tposition: absolute;\n\twidth: 8px;\n\theight: 8px;\n\tz-index: ${value('zIndex.hide')};\n\n\t&::before {\n\t\tposition: absolute;\n\t\twidth: 8px;\n\t\theight: 8px;\n\t\tz-index: ${value('zIndex.hide')};\n\t\tcontent: '';\n\t\tdisplay: block;\n\t\ttransform: rotate(45deg);\n\t\tbackground-color: ${value('color.background.surface.default')};\n\t\tborder-color: ${value('color.border.default')};\n\t}\n\n\t${variants(\n\t\t'placement',\n\t\t{\n\t\t\ttop,\n\t\t\tbottom,\n\t\t\tleft,\n\t\t\tright,\n\t\t\t'right-end': right,\n\t\t\t'right-start': right,\n\t\t\t'left-start': left,\n\t\t\t'auto-end': css``,\n\t\t\t'auto-start': css``,\n\t\t\tauto: css``,\n\t\t\t'bottom-end': bottom,\n\t\t\t'bottom-start': bottom,\n\t\t\t'left-end': left,\n\t\t\t'top-end': top,\n\t\t\t'top-start': top,\n\t\t},\n\t\t'auto',\n\t)}\n`;\n\nexport const Content = styled.div<HTMLAttributes<HTMLElement>>`\n\tpadding: 0;\n\tborder-radius: ${value('radius.m')};\n\tbackground-color: ${value('color.background.surface.default')};\n\tborder: 1px solid ${value('color.border.default')};\n\tbox-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n\tz-index: ${value('zIndex.popover')};\n\tcolor: ${value('color.text.default')};\n\t${typography('body.small.default')};\n\twidth: max-content;\n`;\n"],"names":[],"sourceRoot":""}